import tensorflow as tf
from tensorflow.keras import layers, models
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train / 255.0
x_test = x_test / 255.0

model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),          # turns 2D image into 1D
    layers.Dense(128, activation='relu'),          # 128 neurons layer
    layers.Dense(10, activation='softmax')         # 10 output classes (0-9)
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test Accuracy:', test_acc)
import matplotlib.pyplot as plt

plt.imshow(x_test[0], cmap='gray')
plt.title(f"Predicted: {model.predict(x_test[0:1]).argmax()}")
plt.axis('off')
plt.show()
